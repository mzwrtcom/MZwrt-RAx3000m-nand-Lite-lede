name: Build_mt7981_rax3000m

on: 
  repository_dispatch:
  workflow_dispatch:

# 定时触发编译
  schedule:
    - cron: 25 18 * * 6

# 点赞☆Star触发编译
#  watch:
#    types: [started]

jobs:
  Build_mt7981_rax3000m:
    runs-on: ubuntu-latest
    steps:
    - name: Clone Repository
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        docker rmi `docker images -q`
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt update
        sudo -E apt -y upgrade
        sudo -E apt -y full-upgrade
        sudo -E apt install -y libtorrent-rasterbar-dev clang golang rustc cargo m4 babeltrace libunwind-dev texinfo binutils binutils-gold liblzma-dev libzstd-dev autoconf automake ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt -y install re2c indent libattr1-dev libdebuginfod-dev libiptc-dev rpm gfortran diffstat ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev build-essential git wget curl unzip bzip2 xz-utils flex bison gawk libc6-dev libncurses5-dev libncursesw5-dev libssl-dev zlib1g-dev libtool python3 python3-pip python3-setuptools
        sudo -E apt -y autoremove --purge
        sudo -E systemctl daemon-reload
        sudo -E apt clean
        sudo -E timedatectl set-timezone "Asia/Shanghai"
        git config --global user.name 'GitHub Actions' && git config --global user.email '${{ secrets.GH_MAIL }}'
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
      run: |
        git clone $REPO_URL openwrt
        cd openwrt
        cp -f ../DIY/diy1.sh ./
        chmod +x ./diy1.sh && ./diy1.sh

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

        cp -f ../DIY/diy2.sh ./        
        chmod +x ./diy2.sh && ./diy2.sh
        
    - name: Configuration Customization - Build_mt7981_rax3000m
      env:
        CONFIG_FILE: './config/rax3000m.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ./openwrt/.config
        cd openwrt && cat .config && make defconfig && cat .config
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        make -j$(nproc) V=99 2>&1 | grep -E "(warning|error)"

        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin


    - name: Generate Tag & Release Name
      id: generate_name
      run: |
        time=$(date +%Y%m%d%H%M%S)
        release_tag="$time"
        release_name="MzWrt-CMCC-RAX3000M-$(date +%Y%m%d)"
        echo "RELEASE_TAG=$release_tag" >> $GITHUB_OUTPUT
        echo "RELEASE_NAME=$release_name" >> $GITHUB_OUTPUT

    - name: Create versioned release directory
      working-directory: ./openwrt
      run: |
        mkdir -p ./artifact/${{ steps.generate_name.outputs.RELEASE_NAME }}/
        # 在指定路径下找到所有以 openwrt 开头的文件，并替换文件名中的 openwrt 为 MzWrt
        find ../bin/targets/mediatek/filogic/ -type f -name "openwrt*" -exec bash -c '
          for file; do
            new_name="${file//openwrt/MzWrt}"
            mv "$file" "$new_name"
        done
        ' bash {} +
        tar -czvf MzWrt_firmware.tar.gz ./bin
        mv MzWrt_firmware.tar.gz ./artifact/${{ steps.generate_name.outputs.RELEASE_NAME }}/

    - name: Upload Firmwares
      uses: actions/upload-artifact@main
      with:
        name: CMCC-RAX3000M-OpenWrt
        path: openwrt/artifact/${{ steps.generate_name.outputs.RELEASE_NAME }}/*

    - name: Create Release & Upload
      uses: ncipollo/release-action@v1.14.0
      with:
        artifacts: openwrt/artifact/${{ steps.generate_name.outputs.RELEASE_NAME }}/*
        name: ${{ steps.generate_name.outputs.RELEASE_NAME }}
        tag: ${{ steps.generate_name.outputs.RELEASE_TAG }}
        body: |
         CMCC-RAX3000M-nand
        token: ${{ secrets.GITHUB_TOKEN }}
